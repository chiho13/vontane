import Link from "next/link";
import styled from "styled-components";
import Dropdown from "../Dropdown";
import Head from "next/head";

import { useRef, useState } from "react";
import { AccountLayoutStyle } from "./style";
import ChevronDown from "@/icons/ChevronDown";
import { ChevronsRight, ChevronsLeft } from "lucide-react";

import { LogoutIcon } from "@/icons/Logout";
import { useSupabaseClient } from "@supabase/auth-helpers-react";

import { Sidebar } from "../Sidebar";

const Header = styled.header`
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem;
  color: ${({ theme }) => theme.colors.brand};
`;

const Navbar = styled.nav`
  display: flex;
  gap: 1rem;
`;

const NavLink = styled.a`
  font-weight: bold;
  color: ${({ theme }) => theme.colors.brand};
  text-decoration: none;

  &:hover {
    text-decoration: underline;
  }
`;

const SidebarContainer = styled.div`
  position: relative;
`;

const ToggleButton = styled.button`
  position: absolute;
  top: 0;
  left: 0;
  z-index: 100;
  background-color: white;
  color: black;
  padding: 0.5rem;
  border-radius: 0.25rem;
`;

const SidebarContent = styled.div<{ isLocked: boolean; isOpen: boolean }>`
position: fixed;
top: 0;
transform: ${(props) =>
  props.isLocked || props.isOpen ? "translateX(0)" : "translateX(-250px)"};
width: 250px;
height: 100%;
background-color: #edf2f7;
padding: 1rem;
z-index: 10;

box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1),
  0 2px 4px -1px rgba(0, 0, 0, 0.06)};
transition: transform 300ms;


ul {
  margin-top: 100px;
}
`;

// left: ${(props) => (!props.isLocked && props.isOpen ? "250px" : "0")};

const SidebarItem = styled.li`
  padding: 0.5rem 0;
`;

interface LayoutProps {
  children: React.ReactNode;
  profile: any;
}

const Layout: React.FC<LayoutProps> = ({ children, profile }) => {
  const [isLocked, setIsLocked] = useState<boolean>(true);
  const [isOpen, setIsOpen] = useState<boolean>(false);

  const accountDropdownRef = useRef<any>({});
  const supabase = useSupabaseClient();

  console.log(profile);

  async function logout() {
    await supabase.auth.signOut();
  }

  function AvatarProfile() {
    return (
      profile && (
        <img
          src={profile.avatar || ""}
          alt={`${profile.name}'s avatar`}
          className="w-12 rounded-full"
        />
      )
    );
  }

  const toggleSidebarLock = (): void => {
    setIsLocked(!isLocked);
  };

  const handleMouseEnter = (): void => {
    if (!isLocked) {
      setIsOpen(true);
    }
  };

  const handleMouseLeave = (): void => {
    if (!isLocked) {
      setIsOpen(false);
    }
  };

  return (
    <>
      <Head>
        <title>Verby </title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <SidebarContainer
        onMouseEnter={handleMouseEnter}
        onMouseLeave={handleMouseLeave}
      >
        <ToggleButton
          onClick={toggleSidebarLock}
          style={{
            transform: isLocked ? "translateX(210px)" : "translateX(0)",
            transition: "transform 300ms",
          }}
        >
          {isLocked ? <ChevronsLeft /> : <ChevronsRight />}
        </ToggleButton>
        <SidebarContent isLocked={isLocked} isOpen={isOpen}>
          <ul>
            <SidebarItem>Item 1</SidebarItem>
            <SidebarItem>Item 2</SidebarItem>
            <SidebarItem>Item 3</SidebarItem>
          </ul>
        </SidebarContent>
      </SidebarContainer>
      <main
        className="min-h-screen bg-gradient-to-b from-[#f1f1f1] to-[#e9e9e9] pl-6 pt-4 "
        style={{
          transform: isLocked ? "translateX(250px)" : "translateX(0)",
          transition: "transform 300ms",
        }}
      >
        <AccountLayoutStyle className="ml-4 flex items-center p-4">
          <Dropdown
            id="voiceDropdown"
            ref={accountDropdownRef}
            image={<AvatarProfile />}
          >
            {/* <ul>
            <li>Logout</li>
          </ul> */}
            <div className="p-1" role="none">
              <button
                onClick={logout}
                className="inline-flex w-full rounded-md px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900"
                role="menuitem"
                tabIndex={-1}
                id="menu-item-3"
              >
                <LogoutIcon /> Log out
              </button>
            </div>
          </Dropdown>
          <span className="z-50 pl-4 font-bold">{profile && profile.name}</span>
          {/* <Navbar>
          <Link href="/about">
            <NavLink>About</NavLink>
          </Link>
          <Link href="/contact">
            <NavLink>Contact</NavLink>
          </Link>
        </Navbar> */}
        </AccountLayoutStyle>

        {children}
      </main>
    </>
  );
};

export default Layout;
