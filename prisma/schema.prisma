generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id          String        @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  email       String        
  name        String?
  avatar      String?
  created_at  DateTime?     @default(now()) @db.Timestamptz(6)
  stripe_id   String?      @unique
  is_subscribed Boolean   @default(false)
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
  credits     Int          @default(3000)
  workspaces  workspace[]
  folders     folder[] 
}

model workspace {
  id          String      @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  name        String?
  slate_value String?
  font_style  String      @default("font-sans")
  published   Boolean     @default(false)
  published_at DateTime?
  created_at  DateTime    @default(dbgenerated("now()"))
  deleted_at  DateTime? 
  author_id   String      @db.Uuid
  author      user        @relation(fields: [author_id], references: [id])
  folder_id   String?     @db.Uuid
  folder      folder?     @relation(fields: [folder_id], references: [id]) 
}

model folder {
  id           String      @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  name         String      @default("New Folder") // Default name
  created_at   DateTime    @default(now()) @db.Timestamptz(6)
  owner_id     String      @db.Uuid
  owner        user        @relation(fields: [owner_id], references: [id])
  workspaces   workspace[]
  deleted_at   DateTime? 
  parent_id    String?     @db.Uuid
  parent       folder?     @relation("FolderToFolder", fields: [parent_id], references: [id])
  children     folder[]    @relation("FolderToFolder")
}


